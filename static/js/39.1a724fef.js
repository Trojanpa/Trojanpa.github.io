(self["webpackChunkthree_demo2"]=self["webpackChunkthree_demo2"]||[]).push([[39],{3039:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var o=function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},a=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"demo25"},[t("div",{attrs:{id:"demo25Id"}}),t("div",{attrs:{id:"stats25Id"}})])}],i=t(9365),s=t(9477),r=t(3466),l=t.n(r);let c;var d={name:"Demo25",data(){return{scene:null,camera:null,renderer:null,axes:null,stats:null,controls:null,ctrlObj:{},ctrl:null,spotLight:null,vertexShader:"",shaderMaterials:{"fragment-shader-1":"","fragment-shader-2":"","fragment-shader-3":"","fragment-shader-4":"","fragment-shader-5":"","fragment-shader-6":""},cube:null,step:0}},mounted(){c=this,this.init(),window.addEventListener("resize",this.onWindowResize.bind(this))},methods:{init(){this.scene=new s.xsS,this.camera=new s.cPb(75,window.innerWidth/window.innerHeight,.1,1e3),this.renderer=new s.CP7,this.renderer.setClearColor(new s.Ilk(0)),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.shadowMap.enabled=!0,document.getElementById("demo25Id").appendChild(this.renderer.domElement),this.axes=new s.y8_(50),this.scene.add(this.axes),this.camera.position.x=-55,this.camera.position.y=20,this.camera.position.z=100,this.camera.lookAt(this.scene.position),this.scene.add(this.camera),this.addStats(),this.createControls(),this.spotLight=new s.PMe(16777215),this.spotLight.position.set(0,30,60),this.spotLight.castShadow=!0,this.scene.add(this.spotLight);const e=new s.Mig(16777215);this.scene.add(e);const n=new s._12(100,100),t=new s.YBo({color:11184810}),o=new s.Kj0(n,t);o.rotation.x=-.5*Math.PI,o.position.set(15,0,0),o.receiveShadow=!0,this.scene.add(o),this.initShaderMaterialsData();const a=new s.DvJ(50,50,50),i=this.createMaterial("fragment-shader-1"),r=this.createMaterial("fragment-shader-2"),l=this.createMaterial("fragment-shader-3"),c=this.createMaterial("fragment-shader-4"),d=this.createMaterial("fragment-shader-5"),h=this.createMaterial("fragment-shader-6"),f=[i,r,l,c,d,h];this.cube=new s.Kj0(a,f),this.scene.add(this.cube),this.renderScene()},createAnimation(){this.cube.rotation.x=this.step,this.cube.rotation.y=this.step+=.01,this.cube.rotation.z=this.step,this.cube.material.forEach((e=>{e.uniforms.time.value+=.01}))},createMaterial(e){const n=this.vertexShader,t=this.shaderMaterials[e],o={time:{type:"f",value:.2},scale:{type:"f",value:.2},alpha:{type:"f",value:.6},resolution:{type:"v2",value:new s.FM8}};o.resolution.value.x=window.innerWidth,o.resolution.value.y=window.innerHeight;const a=new s.jyz({uniforms:o,vertexShader:n,fragmentShader:t,transparent:!0});return a},initShaderMaterialsData(){this.vertexShader="\n      uniform float time;\n      varying vec2 vUv;\n      void main() {\n        vec3 posChanged = position;\n        posChanged.x = posChanged.x * (abs(sin(time * 1.0)));\n        posChanged.y = posChanged.y * (abs(cos(time * 1.0)));\n        posChanged.z = posChanged.z * (abs(sin(time * 1.0)));\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(posChanged, 1.0);\n      }",this.shaderMaterials["fragment-shader-1"]="\n      precision highp float;\n      uniform float time;\n      uniform float alpha;\n      uniform vec2 resolution;\n      varying vec2 vUv;\n\n      void main2(void)\n      {\n        vec2 position = vUv;\n        float red = 1.0;\n        float green = 0.25 + sin(time) * 0.25;\n        float blue = 0.0;\n        vec3 rgb = vec3(red, green, blue);\n        vec4 color = vec4(rgb, alpha);\n        gl_FragColor = color;\n      }\n\n      #define PI 3.14159\n      #define TWO_PI (PI*2.0)\n      #define N 68.5\n\n      void main(void)\n      {\n        vec2 center = (gl_FragCoord.xy);\n        center.x=-10.12*sin(time/200.0);\n        center.y=-10.12*cos(time/200.0);\n\n        vec2 v = (gl_FragCoord.xy - resolution/20.0) / min(resolution.y,resolution.x) * 15.0;\n        v.x=v.x-10.0;\n        v.y=v.y-200.0;\n        float col = 0.0;\n\n        for(float i = 0.0; i < N; i++)\n        {\n          float a = i * (TWO_PI/N) * 61.95;\n          col += cos(TWO_PI*(v.y * cos(a) + v.x * sin(a) + sin(time*0.004)*100.0 ));\n        }\n        col /= 5.0;\n        gl_FragColor = vec4(col*1.0, -col*1.0,-col*4.0, 1.0);\n      }",this.shaderMaterials["fragment-shader-2"]="uniform float time;\n      uniform vec2 resolution;\n      #define CGFloat float\n      #define M_PI 3.14159265359\n\n      vec3 hsvtorgb(float h, float s, float v)\n      {\n        float c = v * s;\n        h = mod((h * 6.0), 6.0);\n        float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n        vec3 color;\n\n        if (0.0 <= h && h < 1.0)\n        {\n          color = vec3(c, x, 0.0);\n        }\n        else if (1.0 <= h && h < 2.0)\n        {\n          color = vec3(x, c, 0.0);\n        }\n        else if (2.0 <= h && h < 3.0)\n        {\n          color = vec3(0.0, c, x);\n        }\n        else if (3.0 <= h && h < 4.0)\n        {\n          color = vec3(0.0, x, c);\n        }\n        else if (4.0 <= h && h < 5.0)\n        {\n          color = vec3(x, 0.0, c);\n        }\n        else if (5.0 <= h && h < 6.0)\n        {\n          color = vec3(c, 0.0, x);\n        }\n        else\n        {\n          color = vec3(0.0);\n        }\n\n        color += v - c;\n\n        return color;\n      }\n\n      void main(void)\n      {\n\n        vec2 position = (gl_FragCoord.xy - 0.5 * resolution) / resolution.y;\n        float x = position.x;\n        float y = position.y;\n\n        CGFloat a = atan(x, y);\n\n        CGFloat d = sqrt(x*x+y*y);\n        CGFloat d0 = 0.5*(sin(d-time)+1.5)*d;\n        CGFloat d1 = 5.0;\n\n        CGFloat u = mod(a*d1+sin(d*10.0+time), M_PI*2.0)/M_PI*0.5 - 0.5;\n        CGFloat v = mod(pow(d0*4.0, 0.75),1.0) - 0.5;\n\n        CGFloat dd = sqrt(u*u+v*v);\n\n        CGFloat aa = atan(u, v);\n\n        CGFloat uu = mod(aa*3.0+3.0*cos(dd*30.0-time), M_PI*2.0)/M_PI*0.5 - 0.5;\n\n        CGFloat d2 = sqrt(uu*uu+v*v)*1.5;\n\n        gl_FragColor = vec4( hsvtorgb(dd+time*0.5/d1, sin(dd*time), d2), 1.0 );\n      }",this.shaderMaterials["fragment-shader-3"]="\n      uniform vec2 resolution;\n      uniform float time;\n      vec2 rand(vec2 pos)\n      {\n        return fract( 0.00005 * (pow(pos+2.0, pos.yx + 1.0) * 22222.0));\n      }\n      vec2 rand2(vec2 pos)\n      {\n        return rand(rand(pos));\n      }\n\n      float softnoise(vec2 pos, float scale)\n      {\n        vec2 smplpos = pos * scale;\n        float c0 = rand2((floor(smplpos) + vec2(0.0, 0.0)) / scale).x;\n        float c1 = rand2((floor(smplpos) + vec2(1.0, 0.0)) / scale).x;\n        float c2 = rand2((floor(smplpos) + vec2(0.0, 1.0)) / scale).x;\n        float c3 = rand2((floor(smplpos) + vec2(1.0, 1.0)) / scale).x;\n\n        vec2 a = fract(smplpos);\n        return mix(\n        mix(c0, c1, smoothstep(0.0, 1.0, a.x)),\n        mix(c2, c3, smoothstep(0.0, 1.0, a.x)),\n        smoothstep(0.0, 1.0, a.y));\n      }\n\n      void main(void)\n      {\n        vec2 pos = gl_FragCoord.xy / resolution.y;\n        pos.x += time * 0.1;\n        float color = 0.0;\n        float s = 1.0;\n        for(int i = 0; i < 8; i++)\n        {\n          color += softnoise(pos+vec2(i)*0.02, s * 4.0) / s / 2.0;\n          s *= 2.0;\n        }\n        gl_FragColor = vec4(color);\n      }",this.shaderMaterials["fragment-shader-4"]="\n      uniform float time;\n      uniform vec2 resolution;\n      vec2 rand(vec2 pos)\n      {\n        return fract((pow(pos+2.0,pos.yx+2.0)*555555.0));\n      }\n\n      vec2 rand2(vec2 pos)\n      {\n        return rand(rand(pos));\n      }\n\n      float softnoise(vec2 pos, float scale) {\n        vec2 smplpos = pos * scale;\n        float c0 = rand2((floor(smplpos) + vec2(0.0, 0.0)) / scale).x;\n        float c1 = rand2((floor(smplpos) + vec2(1.0, 0.0)) / scale).x;\n        float c2 = rand2((floor(smplpos) + vec2(0.0, 1.0)) / scale).x;\n        float c3 = rand2((floor(smplpos) + vec2(1.0, 1.0)) / scale).x;\n\n        vec2 a = fract(smplpos);\n        return mix(mix(c0, c1, smoothstep(0.0, 1.0, a.x)),\n        mix(c2, c3, smoothstep(0.0, 1.0, a.x)),\n        smoothstep(0.0, 1.0, a.x));\n      }\n\n      void main( void ) {\n        vec2 pos = gl_FragCoord.xy / resolution.y - time * 0.4;\n\n        float color = 0.0;\n        float s = 1.0;\n        for (int i = 0; i < 6; ++i) {\n          color += softnoise(pos + vec2(0.01 * float(i)), s * 4.0) / s / 2.0;\n          s *= 2.0;\n        }\n        gl_FragColor = vec4(color,mix(color,cos(color),sin(color)),color,1);\n      }",this.shaderMaterials["fragment-shader-5"]="\n      uniform float time;\n      uniform vec2 resolution;\n      void main( void ) {\n\n        vec3 color = vec3(1.0, 0., 0.);\n        vec2 pos = (( 1.4 * gl_FragCoord.xy - resolution.xy) / resolution.xx)*1.5;\n        float r=sqrt(pos.x*pos.x+pos.y*pos.y)/15.0;\n        float size1=2.0*cos(time/60.0);\n        float size2=2.5*sin(time/12.1);\n\n        float rot1=13.00; //82.0+16.0*sin(time/4.0);\n        float rot2=-50.00; //82.0+16.0*sin(time/8.0);\n        float t=sin(time);\n        float a = (60.0)*sin(rot1*atan(pos.x-size1*pos.y/r,pos.y+size1*pos.x/r)+time);\n        a += 200.0*acos(pos.x*2.0+cos(time/2.0))+asin(pos.y*5.0+sin(time/2.0));\n        a=a*(r/50.0);\n        a=200.0*sin(a*5.0)*(r/30.0);\n        if(a>5.0) a=a/200.0;\n        if(a<0.5) a=a*22.5;\n        gl_FragColor = vec4( cos(a/20.0),a*cos(a/200.0),sin(a/8.0), 1.0 );\n      }",this.shaderMaterials["fragment-shader-6"]="\n      uniform float time;\n      uniform vec2 resolution;\n      void main( void )\n      {\n\n        vec2 uPos = ( gl_FragCoord.xy / resolution.xy );//normalize wrt y axis\n        //suPos -= vec2((resolution.x/resolution.y)/2.0, 0.0);//shift origin to center\n\n        uPos.x -= 1.0;\n        uPos.y -= 0.5;\n\n        vec3 color = vec3(0.0);\n        float vertColor = 2.0;\n        for( float i = 0.0; i < 15.0; ++i )\n        {\n          float t = time * (0.9);\n          uPos.y += sin( uPos.x*i + t+i/2.0 ) * 0.1;\n          float fTemp = abs(1.0 / uPos.y / 100.0);\n          vertColor += fTemp;\n          color += vec3( fTemp*(10.0-i)/10.0, fTemp*i/10.0, pow(fTemp,1.5)*1.5 );\n        }\n        vec4 color_final = vec4(color, 1.0);\n        gl_FragColor = color_final;\n      }"},renderScene(){this.stats.update(),this.controls.update(),this.createAnimation(),requestAnimationFrame(this.renderScene),this.renderer.render(this.scene,this.camera)},addStats(){this.stats=new(l()),this.stats.domElement.style.position="absolute",this.stats.domElement.style.left="0px",this.stats.domElement.style.top="0px",this.stats.setMode(0),document.getElementById("stats25Id").appendChild(this.stats.domElement)},onWindowResize(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)},createControls(){this.controls=new i.z(this.camera,this.renderer.domElement),this.controls.update()}}},h=d,f=t(1001),m=(0,f.Z)(h,o,a,!1,null,"60328746",null),p=m.exports},3466:function(e){(function(n,t){e.exports=t()})(0,(function(){var e=function(){function n(e){return a.appendChild(e.dom),e}function t(e){for(var n=0;n<a.children.length;n++)a.children[n].style.display=n===e?"block":"none";o=e}var o=0,a=document.createElement("div");a.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",a.addEventListener("click",(function(e){e.preventDefault(),t(++o%a.children.length)}),!1);var i=(performance||Date).now(),s=i,r=0,l=n(new e.Panel("FPS","#0ff","#002")),c=n(new e.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var d=n(new e.Panel("MB","#f08","#201"));return t(0),{REVISION:16,dom:a,addPanel:n,showPanel:t,begin:function(){i=(performance||Date).now()},end:function(){r++;var e=(performance||Date).now();if(c.update(e-i,200),e>s+1e3&&(l.update(1e3*r/(e-s),100),s=e,r=0,d)){var n=performance.memory;d.update(n.usedJSHeapSize/1048576,n.jsHeapSizeLimit/1048576)}return e},update:function(){i=this.end()},domElement:a,setMode:t}};return e.Panel=function(e,n,t){var o=1/0,a=0,i=Math.round,s=i(window.devicePixelRatio||1),r=80*s,l=48*s,c=3*s,d=2*s,h=3*s,f=15*s,m=74*s,p=30*s,v=document.createElement("canvas");v.width=r,v.height=l,v.style.cssText="width:80px;height:48px";var u=v.getContext("2d");return u.font="bold "+9*s+"px Helvetica,Arial,sans-serif",u.textBaseline="top",u.fillStyle=t,u.fillRect(0,0,r,l),u.fillStyle=n,u.fillText(e,c,d),u.fillRect(h,f,m,p),u.fillStyle=t,u.globalAlpha=.9,u.fillRect(h,f,m,p),{dom:v,update:function(l,x){o=Math.min(o,l),a=Math.max(a,l),u.fillStyle=t,u.globalAlpha=1,u.fillRect(0,0,r,f),u.fillStyle=n,u.fillText(i(l)+" "+e+" ("+i(o)+"-"+i(a)+")",c,d),u.drawImage(v,h+s,f,m-s,p,h,f,m-s,p),u.fillRect(h+m-s,f,s,p),u.fillStyle=t,u.globalAlpha=.9,u.fillRect(h+m-s,f,s,i((1-l/x)*p))}}},e}))}}]);